{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/utils/deepEqual.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../node_modules/@material-ui/core/esm/ClickAwayListener/ClickAwayListener.js","../node_modules/@material-ui/core/esm/SnackbarContent/SnackbarContent.js","../node_modules/@material-ui/core/esm/Snackbar/Snackbar.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","_toConsumableArray","arr","arrayLikeToArray","iter","Object","from","HTMLElement","EVENTS","VALIDATION_MODE","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","deepMerge","target","source","isPrimitive","targetValue","sourceValue","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","search","output","isString","startsWith","find","transformToNestObject","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","copy","isWeb","File","getTime","Set","Map","get","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","shouldRenderBaseOnError","shouldRender","shouldReRender","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","currentError","validateResolver","removeFieldEventListener","updateWatchedValue","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","fieldArrayValue","assignWatchFields","combinedDefaultValues","watch","unregister","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrRegisterOptions","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","prop","control","React.useMemo","FormContext","React.createContext","displayName","mapEventPropToEvent","eventProp","toLowerCase","ClickAwayListener","props","children","_props$disableReactTr","disableReactTree","_props$mouseEvent","mouseEvent","onClickAway","_props$touchEvent","touchEvent","movedRef","React","nodeRef","activatedRef","syntheticEventRef","setTimeout","handleOwnRef","instance","ReactDOM","handleRef","useForkRef","handleClickAway","useEventCallback","event","insideReactTree","documentElement","clientWidth","clientX","clientHeight","clientY","clickedRootScrollbar","insideDOM","composedPath","ownerDocument","contains","createHandleSynthetic","handlerName","childrenPropsHandler","childrenProps","mappedTouchEvent","doc","handleTouchMove","mappedMouseEvent","SnackbarContent","action","classes","className","_props$role","role","other","_objectWithoutProperties","Paper","_extends","square","elevation","clsx","root","withStyles","theme","emphasis","palette","backgroundColor","emphasize","background","default","typography","body2","_defineProperty","color","getContrastText","display","alignItems","flexWrap","padding","borderRadius","shape","flexGrow","breakpoints","up","minWidth","marginLeft","paddingLeft","marginRight","Snackbar","_props$anchorOrigin","anchorOrigin","vertical","horizontal","_props$autoHideDurati","autoHideDuration","ClickAwayListenerProps","ContentProps","_props$disableWindowB","disableWindowBlurListener","onClose","onEnter","onEntered","onEntering","onExit","onExited","onExiting","onMouseEnter","onMouseLeave","open","resumeHideDuration","_props$TransitionComp","TransitionComponent","Grow","_props$transitionDura","transitionDuration","enter","duration","enteringScreen","exit","leavingScreen","TransitionProps","timerAutoHide","_React$useState","exited","setExited","handleClose","apply","arguments","setAutoHideTimer","autoHideDurationParam","clearTimeout","handlePause","handleResume","concat","capitalize","appear","in","createChainedFunction","timeout","direction","top1","top","bottom1","bottom","right","justifyContent","left","top3","bottom3","right3","left3","center","transform","zIndex","snackbar","position","anchorOriginTopCenter","anchorOriginBottomCenter","anchorOriginTopRight","anchorOriginBottomRight","anchorOriginTopLeft","anchorOriginBottomLeft","flip"],"mappings":"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","file":"static/js/8.5a9e7cd7.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return valueAsNumber\n      ? +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields),\n    setDirtyFields(defaultValues, values, dirtyFields),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(\n          formValues,\n          isEmptyObject(defaultValuesRef.current)\n            ? defaultValuesAtRenderRef.current\n            : defaultValuesRef.current,\n        );\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesAtRenderRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !isPrimitive(value) &&\n        set(shallowFieldsStateRef.current, name, cloneObject(value));\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: fieldArrayDefaultValuesRef.current[parentName],\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            isFieldWatched(name as FieldName<TFieldValues>);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        if (fieldArrayNamesRef.current.has(fieldNames)) {\n          const fieldArrayValue = get(\n            fieldArrayValuesRef.current,\n            fieldNames,\n            [],\n          );\n          fieldValues =\n            !fieldArrayValue.length ||\n            fieldArrayValue.length !==\n              compact(get(fieldValues, fieldNames, [])).length\n              ? fieldArrayValuesRef.current\n              : fieldValues;\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport useForkRef from '../utils/useForkRef';\nimport useEventCallback from '../utils/useEventCallback';\nimport { elementAcceptingRef, exactProp } from '@material-ui/utils';\n\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\n\nfunction clickedRootScrollbar(event) {\n  return document.documentElement.clientWidth < event.clientX || document.documentElement.clientHeight < event.clientY;\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n */\n\n\nfunction ClickAwayListener(props) {\n  var children = props.children,\n      _props$disableReactTr = props.disableReactTree,\n      disableReactTree = _props$disableReactTr === void 0 ? false : _props$disableReactTr,\n      _props$mouseEvent = props.mouseEvent,\n      mouseEvent = _props$mouseEvent === void 0 ? 'onClick' : _props$mouseEvent,\n      onClickAway = props.onClickAway,\n      _props$touchEvent = props.touchEvent,\n      touchEvent = _props$touchEvent === void 0 ? 'onTouchEnd' : _props$touchEvent;\n  var movedRef = React.useRef(false);\n  var nodeRef = React.useRef(null);\n  var activatedRef = React.useRef(false);\n  var syntheticEventRef = React.useRef(false);\n  React.useEffect(function () {\n    // Ensure that this component is not \"activated\" synchronously.\n    // https://github.com/facebook/react/issues/20074\n    setTimeout(function () {\n      activatedRef.current = true;\n    }, 0);\n    return function () {\n      activatedRef.current = false;\n    };\n  }, []); // can be removed once we drop support for non ref forwarding class components\n\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    nodeRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(children.ref, handleOwnRef); // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviours like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n\n  var handleClickAway = useEventCallback(function (event) {\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    var insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false; // 1. IE 11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n\n    if (!activatedRef.current || !nodeRef.current || clickedRootScrollbar(event)) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    var insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      // TODO v6 remove dead logic https://caniuse.com/#search=composedPath.\n      var doc = ownerDocument(nodeRef.current);\n      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);\n    }\n\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  }); // Keep track of mouse/touch events that bubbled up through the portal.\n\n  var createHandleSynthetic = function createHandleSynthetic(handlerName) {\n    return function (event) {\n      syntheticEventRef.current = true;\n      var childrenPropsHandler = children.props[handlerName];\n\n      if (childrenPropsHandler) {\n        childrenPropsHandler(event);\n      }\n    };\n  };\n\n  var childrenProps = {\n    ref: handleRef\n  };\n\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n\n  React.useEffect(function () {\n    if (touchEvent !== false) {\n      var mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      var doc = ownerDocument(nodeRef.current);\n\n      var handleTouchMove = function handleTouchMove() {\n        movedRef.current = true;\n      };\n\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n      return function () {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, touchEvent]);\n\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n\n  React.useEffect(function () {\n    if (mouseEvent !== false) {\n      var mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      var doc = ownerDocument(nodeRef.current);\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n      return function () {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.cloneElement(children, childrenProps));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\n   * This prop changes how portaled elements are handled.\n   */\n  disableReactTree: PropTypes.bool,\n\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   */\n  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nexport default ClickAwayListener;","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Paper from '../Paper';\nimport { emphasize } from '../styles/colorManipulator';\nexport var styles = function styles(theme) {\n  var emphasis = theme.palette.type === 'light' ? 0.8 : 0.98;\n  var backgroundColor = emphasize(theme.palette.background.default, emphasis);\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.body2, _defineProperty({\n      color: theme.palette.getContrastText(backgroundColor),\n      backgroundColor: backgroundColor,\n      display: 'flex',\n      alignItems: 'center',\n      flexWrap: 'wrap',\n      padding: '6px 16px',\n      borderRadius: theme.shape.borderRadius,\n      flexGrow: 1\n    }, theme.breakpoints.up('sm'), {\n      flexGrow: 'initial',\n      minWidth: 288\n    })),\n\n    /* Styles applied to the message wrapper element. */\n    message: {\n      padding: '8px 0'\n    },\n\n    /* Styles applied to the action wrapper element if `action` is provided. */\n    action: {\n      display: 'flex',\n      alignItems: 'center',\n      marginLeft: 'auto',\n      paddingLeft: 16,\n      marginRight: -8\n    }\n  };\n};\nvar SnackbarContent = /*#__PURE__*/React.forwardRef(function SnackbarContent(props, ref) {\n  var action = props.action,\n      classes = props.classes,\n      className = props.className,\n      message = props.message,\n      _props$role = props.role,\n      role = _props$role === void 0 ? 'alert' : _props$role,\n      other = _objectWithoutProperties(props, [\"action\", \"classes\", \"className\", \"message\", \"role\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    role: role,\n    square: true,\n    elevation: 6,\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.message\n  }, message), action ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.action\n  }, action) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? SnackbarContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display. It renders after the message, at the end of the snackbar.\n   */\n  action: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The message to display.\n   */\n  message: PropTypes.node,\n\n  /**\n   * The ARIA role attribute of the element.\n   */\n  role: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiSnackbarContent'\n})(SnackbarContent);","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport { duration } from '../styles/transitions';\nimport ClickAwayListener from '../ClickAwayListener';\nimport useEventCallback from '../utils/useEventCallback';\nimport capitalize from '../utils/capitalize';\nimport createChainedFunction from '../utils/createChainedFunction';\nimport Grow from '../Grow';\nimport SnackbarContent from '../SnackbarContent';\nexport var styles = function styles(theme) {\n  var top1 = {\n    top: 8\n  };\n  var bottom1 = {\n    bottom: 8\n  };\n  var right = {\n    justifyContent: 'flex-end'\n  };\n  var left = {\n    justifyContent: 'flex-start'\n  };\n  var top3 = {\n    top: 24\n  };\n  var bottom3 = {\n    bottom: 24\n  };\n  var right3 = {\n    right: 24\n  };\n  var left3 = {\n    left: 24\n  };\n  var center = {\n    left: '50%',\n    right: 'auto',\n    transform: 'translateX(-50%)'\n  };\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      zIndex: theme.zIndex.snackbar,\n      position: 'fixed',\n      display: 'flex',\n      left: 8,\n      right: 8,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'center' }}`. */\n    anchorOriginTopCenter: _extends({}, top1, _defineProperty({}, theme.breakpoints.up('sm'), _extends({}, top3, center))),\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'center' }}`. */\n    anchorOriginBottomCenter: _extends({}, bottom1, _defineProperty({}, theme.breakpoints.up('sm'), _extends({}, bottom3, center))),\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }}`. */\n    anchorOriginTopRight: _extends({}, top1, right, _defineProperty({}, theme.breakpoints.up('sm'), _extends({\n      left: 'auto'\n    }, top3, right3))),\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }}`. */\n    anchorOriginBottomRight: _extends({}, bottom1, right, _defineProperty({}, theme.breakpoints.up('sm'), _extends({\n      left: 'auto'\n    }, bottom3, right3))),\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }}`. */\n    anchorOriginTopLeft: _extends({}, top1, left, _defineProperty({}, theme.breakpoints.up('sm'), _extends({\n      right: 'auto'\n    }, top3, left3))),\n\n    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }}`. */\n    anchorOriginBottomLeft: _extends({}, bottom1, left, _defineProperty({}, theme.breakpoints.up('sm'), _extends({\n      right: 'auto'\n    }, bottom3, left3)))\n  };\n};\nvar Snackbar = /*#__PURE__*/React.forwardRef(function Snackbar(props, ref) {\n  var action = props.action,\n      _props$anchorOrigin = props.anchorOrigin;\n  _props$anchorOrigin = _props$anchorOrigin === void 0 ? {\n    vertical: 'bottom',\n    horizontal: 'center'\n  } : _props$anchorOrigin;\n\n  var vertical = _props$anchorOrigin.vertical,\n      horizontal = _props$anchorOrigin.horizontal,\n      _props$autoHideDurati = props.autoHideDuration,\n      autoHideDuration = _props$autoHideDurati === void 0 ? null : _props$autoHideDurati,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      ClickAwayListenerProps = props.ClickAwayListenerProps,\n      ContentProps = props.ContentProps,\n      _props$disableWindowB = props.disableWindowBlurListener,\n      disableWindowBlurListener = _props$disableWindowB === void 0 ? false : _props$disableWindowB,\n      message = props.message,\n      onClose = props.onClose,\n      onEnter = props.onEnter,\n      onEntered = props.onEntered,\n      onEntering = props.onEntering,\n      onExit = props.onExit,\n      onExited = props.onExited,\n      onExiting = props.onExiting,\n      onMouseEnter = props.onMouseEnter,\n      onMouseLeave = props.onMouseLeave,\n      open = props.open,\n      resumeHideDuration = props.resumeHideDuration,\n      _props$TransitionComp = props.TransitionComponent,\n      TransitionComponent = _props$TransitionComp === void 0 ? Grow : _props$TransitionComp,\n      _props$transitionDura = props.transitionDuration,\n      transitionDuration = _props$transitionDura === void 0 ? {\n    enter: duration.enteringScreen,\n    exit: duration.leavingScreen\n  } : _props$transitionDura,\n      TransitionProps = props.TransitionProps,\n      other = _objectWithoutProperties(props, [\"action\", \"anchorOrigin\", \"autoHideDuration\", \"children\", \"classes\", \"className\", \"ClickAwayListenerProps\", \"ContentProps\", \"disableWindowBlurListener\", \"message\", \"onClose\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"onMouseEnter\", \"onMouseLeave\", \"open\", \"resumeHideDuration\", \"TransitionComponent\", \"transitionDuration\", \"TransitionProps\"]);\n\n  var timerAutoHide = React.useRef();\n\n  var _React$useState = React.useState(true),\n      exited = _React$useState[0],\n      setExited = _React$useState[1];\n\n  var handleClose = useEventCallback(function () {\n    if (onClose) {\n      onClose.apply(void 0, arguments);\n    }\n  });\n  var setAutoHideTimer = useEventCallback(function (autoHideDurationParam) {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n\n    clearTimeout(timerAutoHide.current);\n    timerAutoHide.current = setTimeout(function () {\n      handleClose(null, 'timeout');\n    }, autoHideDurationParam);\n  });\n  React.useEffect(function () {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n\n    return function () {\n      clearTimeout(timerAutoHide.current);\n    };\n  }, [open, autoHideDuration, setAutoHideTimer]); // Pause the timer when the user is interacting with the Snackbar\n  // or when the user hide the window.\n\n  var handlePause = function handlePause() {\n    clearTimeout(timerAutoHide.current);\n  }; // Restart the timer when the user is no longer interacting with the Snackbar\n  // or when the window is shown back.\n\n\n  var handleResume = React.useCallback(function () {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n\n  var handleMouseEnter = function handleMouseEnter(event) {\n    if (onMouseEnter) {\n      onMouseEnter(event);\n    }\n\n    handlePause();\n  };\n\n  var handleMouseLeave = function handleMouseLeave(event) {\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n\n    handleResume();\n  };\n\n  var handleClickAway = function handleClickAway(event) {\n    if (onClose) {\n      onClose(event, 'clickaway');\n    }\n  };\n\n  var handleExited = function handleExited() {\n    setExited(true);\n  };\n\n  var handleEnter = function handleEnter() {\n    setExited(false);\n  };\n\n  React.useEffect(function () {\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener('focus', handleResume);\n      window.addEventListener('blur', handlePause);\n      return function () {\n        window.removeEventListener('focus', handleResume);\n        window.removeEventListener('blur', handlePause);\n      };\n    }\n\n    return undefined;\n  }, [disableWindowBlurListener, handleResume, open]); // So we only render active snackbars.\n\n  if (!open && exited) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(ClickAwayListener, _extends({\n    onClickAway: handleClickAway\n  }, ClickAwayListenerProps), /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, classes[\"anchorOrigin\".concat(capitalize(vertical)).concat(capitalize(horizontal))], className),\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    ref: ref\n  }, other), /*#__PURE__*/React.createElement(TransitionComponent, _extends({\n    appear: true,\n    in: open,\n    onEnter: createChainedFunction(handleEnter, onEnter),\n    onEntered: onEntered,\n    onEntering: onEntering,\n    onExit: onExit,\n    onExited: createChainedFunction(handleExited, onExited),\n    onExiting: onExiting,\n    timeout: transitionDuration,\n    direction: vertical === 'top' ? 'down' : 'up'\n  }, TransitionProps), children || /*#__PURE__*/React.createElement(SnackbarContent, _extends({\n    message: message,\n    action: action\n  }, ContentProps)))));\n});\nprocess.env.NODE_ENV !== \"production\" ? Snackbar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display. It renders after the message, at the end of the snackbar.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The anchor of the `Snackbar`.\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['center', 'left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   */\n  autoHideDuration: PropTypes.number,\n\n  /**\n   * Replace the `SnackbarContent` component.\n   */\n  children: PropTypes.element,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Props applied to the `ClickAwayListener` element.\n   */\n  ClickAwayListenerProps: PropTypes.object,\n\n  /**\n   * Props applied to the [`SnackbarContent`](/api/snackbar-content/) element.\n   */\n  ContentProps: PropTypes.object,\n\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   */\n  disableWindowBlurListener: PropTypes.bool,\n\n  /**\n   * When displaying multiple consecutive Snackbars from a parent rendering a single\n   * <Snackbar/>, add the key prop to ensure independent treatment of each message.\n   * e.g. <Snackbar key={message} />, otherwise, the message may update-in-place and\n   * features such as autoHideDuration may be canceled.\n   */\n  key: PropTypes.any,\n\n  /**\n   * The message to display.\n   */\n  message: PropTypes.node,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired before the transition is entering.\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired when the transition has entered.\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired when the transition is entering.\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired before the transition is exiting.\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired when the transition has exited.\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * Callback fired when the transition is exiting.\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseEnter: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseLeave: PropTypes.func,\n\n  /**\n   * If `true`, `Snackbar` is open.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` prop isn't specified, it does nothing.\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration: PropTypes.number,\n\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.\n   */\n  TransitionProps: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  flip: false,\n  name: 'MuiSnackbar'\n})(Snackbar);"],"sourceRoot":""}