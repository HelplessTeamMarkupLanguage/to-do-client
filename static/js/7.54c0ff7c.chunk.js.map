{"version":3,"sources":["components/ToDoCard/ToDoCard.js","components/AddToDoDialog/AddToDoDialog.js","components/NoDataFound/NoDataFound.js","containers/ToDoList/ToDoList.js","axios.js"],"names":["toDoCardStyle","makeStyles","theme","card","backgroundColor","color","height","padding","marginBottom","spacing","display","width","justifyContent","alignSelf","breakpoints","down","margin","up","buttonsHolder","alignItems","toDoCard","props","classes","Card","root","text","className","IconButton","onClick","handleFinishToDo","Check","handleDeleteToDo","Delete","dialogStyle","dialog","textAlign","boxSizing","flexDirection","minWidth","dialogHeader","buttonRoot","marginTop","message","datePicker","addToDoDialog","Dialog","open","onClose","handleCloseDialog","paper","DialogTitle","Close","TextField","onInvalid","id","label","multiline","value","toDoMessage","onChange","handleToDoMessageChange","rowsMax","utils","DateFnsUtils","selectedDate","handleDateChange","format","Button","variant","handleAddToDo","disabled","noDataStyle","fontSize","noDataFound","toDoListStyle","toDoList","flexFlow","header","top","fabButton","position","bottom","right","ToDoList","toDos","useState","setTodoList","setOpen","Date","setSelectedDate","setToDoMessage","isLoading","setIsLoading","isChanged","setIsChanged","fetchToDoList","a","axios","get","then","res","console","log","data","catch","error","useEffect","cleanDialog","LoadingSpinner","length","NoDataFound","map","todo","ToDoCard","_id","delete","isFinished","toDo","put","find","Fab","Add","AddToDoDialog","date","event","target","post","instance","create","baseURL"],"mappings":"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","file":"static/js/7.54c0ff7c.chunk.js","sourcesContent":["import { Card, IconButton, makeStyles } from '@material-ui/core';\r\nimport { Check, Delete } from '@material-ui/icons';\r\nimport React from 'react';\r\n\r\nconst toDoCardStyle = makeStyles((theme) => ({\r\n  card: {\r\n    backgroundColor: '#274e6c',\r\n    color: '#eeecdf',\r\n    height: 'min-content',\r\n    padding: '10px',\r\n    marginBottom: theme.spacing(2),\r\n    display: 'flex',\r\n    width: '100%',\r\n    justifyContent: 'space-between',\r\n    '& h3': {\r\n      alignSelf: 'center',\r\n    },\r\n    [theme.breakpoints.down('sm')]: {\r\n      '& h3': {\r\n        margin: '10px 0',\r\n      },\r\n    },\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '80% ',\r\n    },\r\n    [theme.breakpoints.up('lg')]: {\r\n      width: '45% ',\r\n    },\r\n  },\r\n  buttonsHolder: {\r\n    width: 'max-content',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n}));\r\n\r\nconst toDoCard = (props) => {\r\n  const classes = toDoCardStyle();\r\n  return (\r\n    <Card classes={{ root: classes.card }}>\r\n      <h3>{props.text} </h3>\r\n      <div className={classes.buttonsHolder}>\r\n        <IconButton onClick={props.handleFinishToDo}>\r\n          <Check color=\"secondary\" />\r\n        </IconButton>\r\n        <IconButton onClick={props.handleDeleteToDo}>\r\n          <Delete color=\"secondary\" />\r\n        </IconButton>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default toDoCard;\r\n","import { Button, Dialog, DialogTitle, IconButton, makeStyles, TextField } from '@material-ui/core';\r\nimport { Close } from '@material-ui/icons';\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport React from 'react';\r\n\r\nconst dialogStyle = makeStyles((theme) => ({\r\n  dialog: {\r\n    textAlign: 'center',\r\n    padding: 18,\r\n    boxSizing: 'border-box',\r\n    display: 'flex',\r\n    flexDirection: 'colum',\r\n    [theme.breakpoints.down('xs')]: {\r\n      height: 'max-content',\r\n      minWidth: '90%',\r\n    },\r\n    [theme.breakpoints.up('xs')]: {\r\n      minWidth: '25%',\r\n      height: 'max-content',\r\n    },\r\n  },\r\n  dialogHeader: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  },\r\n  buttonRoot: {\r\n    color: 'white',\r\n    width: '70%',\r\n    margin: 'auto',\r\n    marginTop: '50px !important',\r\n\r\n    [theme.breakpoints.down('xs')]: {\r\n      minWidth: '90%',\r\n    },\r\n  },\r\n  message: {\r\n    width: '90%',\r\n    marginBottom: 20,\r\n  },\r\n  datePicker: {\r\n    width: '90%',\r\n  },\r\n}));\r\n\r\nconst addToDoDialog = (props) => {\r\n  const classes = dialogStyle();\r\n\r\n  return (\r\n    <Dialog open={props.open} onClose={props.handleCloseDialog} classes={{ paper: classes.dialog }}>\r\n      <div className={classes.dialogHeader}>\r\n        <DialogTitle>Add New To Do</DialogTitle>\r\n        <IconButton onClick={props.handleCloseDialog}>\r\n          <Close color=\"primary\" />\r\n        </IconButton>\r\n      </div>\r\n      <div>\r\n        <TextField\r\n          onInvalid={false}\r\n          className={classes.message}\r\n          id=\"standard-basic\"\r\n          label=\"ToDo\"\r\n          multiline\r\n          value={props.toDoMessage}\r\n          onChange={props.handleToDoMessageChange}\r\n          rowsMax={2}\r\n        />\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n          <KeyboardDatePicker\r\n            className={classes.datePicker}\r\n            margin=\"normal\"\r\n            id=\"date-picker-dialog\"\r\n            label=\"Date\"\r\n            value={props.selectedDate}\r\n            onChange={props.handleDateChange}\r\n            format=\"MM/dd/yyyy\"\r\n          />\r\n        </MuiPickersUtilsProvider>\r\n      </div>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        classes={{ root: classes.buttonRoot }}\r\n        onClick={props.handleAddToDo}\r\n        disabled={!props.toDoMessage}\r\n      >\r\n        Add\r\n      </Button>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default addToDoDialog;\r\n","import { Card, makeStyles } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst noDataStyle = makeStyles((theme) => ({\r\n  card: {\r\n    backgroundColor: '#274e6c',\r\n    color: '#eeecdf',\r\n    margin: 'auto',\r\n    fontSize: 20,\r\n    '& h4': {\r\n      textAlign: 'center',\r\n    },\r\n    [theme.breakpoints.down('sm')]: {\r\n      width: '100%',\r\n    },\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '50%',\r\n    },\r\n    [theme.breakpoints.up('lg')]: {\r\n      width: '30%',\r\n    },\r\n  },\r\n}));\r\n\r\nconst noDataFound = (props) => {\r\n  const classes = noDataStyle();\r\n\r\n  return (\r\n    <Card classes={{ root: classes.card }}>\r\n      <h4>You have nothing todo</h4>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default noDataFound;\r\n","import React, { useEffect, useState } from 'react';\r\nimport ToDoCard from '../../components/ToDoCard/ToDoCard';\r\nimport axios from '../../axios';\r\nimport { Fab, makeStyles } from '@material-ui/core';\r\nimport { Add } from '@material-ui/icons';\r\nimport AddToDoDialog from '../../components/AddToDoDialog/AddToDoDialog';\r\nimport LoadingSpinner from '../../components/LoadingSpinner/LoadingSpinner';\r\nimport NoDataFound from '../../components/NoDataFound/NoDataFound';\r\n\r\nconst toDoListStyle = makeStyles((theme) => ({\r\n  toDoList: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    flexFlow: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  header: {\r\n    top: '2%',\r\n    marginBottom: '3em',\r\n    color: '#274e6c',\r\n    textAlign: 'center',\r\n  },\r\n  fabButton: {\r\n    position: 'fixed',\r\n    bottom: '5%',\r\n    right: theme.spacing(2),\r\n    backgroundColor: '#f0810f',\r\n    [theme.breakpoints.down('xs')]: {\r\n      bottom: '15%',\r\n    },\r\n  },\r\n}));\r\n\r\nconst ToDoList = (props) => {\r\n  const classes = toDoListStyle();\r\n  const [toDoList, setTodoList] = useState([]);\r\n  const [open, setOpen] = useState(false);\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [toDoMessage, setToDoMessage] = useState();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  let toDos;\r\n\r\n  //ez hack majd kitalálok valamit ne így keljen mert undorító megoldás, lehet valami rxjs megoldás lesz belőle\r\n  const [isChanged, setIsChanged] = useState(false);\r\n\r\n  const fetchToDoList = async () => {\r\n    await axios\r\n      .get('/todo')\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        setTodoList(res.data);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        console.log('asd');\r\n        console.log('asdasd');\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchToDoList();\r\n  }, [isChanged]);\r\n\r\n  const handleDeleteToDo = (id) => {\r\n    setIsLoading(true);\r\n    axios\r\n      .delete('/todo/' + id)\r\n      .then(() => {\r\n        setIsChanged(!isChanged);\r\n      })\r\n      .catch((error) => console.log('valami hiba', error));\r\n  };\r\n\r\n  const handleFinishToDo = (id, isFinished) => {\r\n    console.log(toDoList);\r\n    const toDo = {\r\n      isFinished: !isFinished,\r\n    };\r\n    axios\r\n      .put('/todo/' + id, toDo)\r\n      .then((toDoList.find((todo) => todo._id === id).isFinished = !isFinished))\r\n      .catch((error) => console.log('valami hiba', error));\r\n  };\r\n\r\n  const handleAddToDo = () => {\r\n    console.log(selectedDate);\r\n    const toDo = {\r\n      date: selectedDate ? selectedDate : new Date(),\r\n      isFinished: false,\r\n      text: toDoMessage,\r\n    };\r\n    axios\r\n      .post('/todo', toDo)\r\n      .then(() => {\r\n        handleCloseDialog();\r\n        setIsChanged(!isChanged);\r\n        setIsLoading(true);\r\n        cleanDialog();\r\n      })\r\n      .catch((error) => console.log('valami hiba', error));\r\n  };\r\n\r\n  const handleOpenDialog = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  const handleToDoMessageChange = (event) => {\r\n    setToDoMessage(event.target.value);\r\n  };\r\n\r\n  const cleanDialog = () => {\r\n    setToDoMessage();\r\n    setSelectedDate();\r\n  };\r\n\r\n  if (isLoading === true) {\r\n    toDos = <LoadingSpinner text=\"Your ToDos Are On The Way\" />;\r\n  } else if (isLoading === false && toDoList.length === 0) {\r\n    toDos = <NoDataFound />;\r\n  } else {\r\n    toDos = toDoList.map((todo) => (\r\n      <ToDoCard\r\n        key={todo._id}\r\n        text={todo.message}\r\n        handleDeleteToDo={() => handleDeleteToDo(todo._id)}\r\n        handleFinishToDo={() => handleFinishToDo(todo._id, todo.isFinished)}\r\n      />\r\n    ));\r\n  }\r\n\r\n  return (\r\n    <div className={classes.toDoList}>\r\n      <h1 className={classes.header}>All Tasks</h1>\r\n      {toDos}\r\n      <Fab color=\"primary\" classes={{ root: classes.fabButton }} onClick={handleOpenDialog}>\r\n        <Add />\r\n      </Fab>\r\n      <AddToDoDialog\r\n        handleCloseDialog={handleCloseDialog}\r\n        handleDateChange={handleDateChange}\r\n        handleToDoMessageChange={(event) => handleToDoMessageChange(event)}\r\n        handleAddToDo={handleAddToDo}\r\n        open={open}\r\n        toDoMessage={toDoMessage}\r\n        selectedDate={selectedDate}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://to-do-798.herokuapp.com/',\r\n});\r\n\r\nexport default instance;\r\n"],"sourceRoot":""}