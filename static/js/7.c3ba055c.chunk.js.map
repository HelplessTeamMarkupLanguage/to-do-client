{"version":3,"sources":["axios.js","containers/LoginPage/LoginPage.js"],"names":["instance","axios","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","common","loginStyle","makeStyles","theme","header","top","marginBottom","color","textAlign","card","maxWidth","margin","spacing","breakpoints","up","marginTop","textField","width","submitButton","float","marginRight","clearButton","buttonHolder","registration","position","fontSize","textDecoration","LoginPage","props","useForm","mode","register","handleSubmit","errors","formState","clearErrors","reset","useState","username","setUsername","password","setPassword","snackBarOpen","setSnackBarOpen","classes","onSubmit","a","post","then","res","setItem","data","history","push","catch","err","console","error","className","defaultValue","onChange","event","target","value","inputRef","required","minLength","message","validate","helperText","name","label","type","autoComplete","variant","disabled","isValid","onClick","to","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose"],"mappings":"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","file":"static/js/7.c3ba055c.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://to-do-798.herokuapp.com/',\r\n});\r\n\r\ninstance.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.common['Authorization'] = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport default instance;\r\n","import { Button, Card, makeStyles, Snackbar, TextField } from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { NavLink } from 'react-router-dom';\r\nimport axios from '../../axios';\r\n\r\nconst loginStyle = makeStyles((theme) => ({\r\n  header: {\r\n    top: '2%',\r\n    marginBottom: '1em',\r\n    color: '#274e6c',\r\n    textAlign: 'center',\r\n  },\r\n  card: {\r\n    maxWidth: 500,\r\n    margin: theme.spacing(2),\r\n    [theme.breakpoints.up(550)]: { margin: 'auto', marginTop: theme.spacing(2) },\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  textField: {\r\n    width: '90%',\r\n    margin: theme.spacing(2),\r\n    marginBottom: 0,\r\n  },\r\n  submitButton: {\r\n    float: 'right',\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n    marginRight: '8%',\r\n  },\r\n  clearButton: {\r\n    float: 'right',\r\n    margin: theme.spacing(1),\r\n  },\r\n  buttonHolder: {\r\n    marginTop: 20,\r\n    width: '100%',\r\n  },\r\n  registration: {\r\n    width: '100%',\r\n    position: 'static',\r\n    fontSize: 16,\r\n    textAlign: 'center',\r\n    marginTop: 50,\r\n    color: '#274e6c',\r\n    '& a': {\r\n      color: '#de7a22',\r\n      textDecoration: 'none',\r\n    },\r\n    '& a:hover': {\r\n      textDecoration: 'underline',\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function LoginPage(props) {\r\n  const { register, handleSubmit, errors, formState, clearErrors, reset } = useForm({\r\n    mode: 'onChange',\r\n  });\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [snackBarOpen, setSnackBarOpen] = useState(false);\r\n  const classes = loginStyle();\r\n\r\n  const handleClear = () => {\r\n    setUsername('');\r\n    setPassword('');\r\n    clearErrors();\r\n    reset();\r\n  };\r\n\r\n  const onSubmit = async () => {\r\n    await axios\r\n      .post('/user/login', { username, password })\r\n      .then((res) => {\r\n        localStorage.setItem('token', res.data.token);\r\n        props.history.push('/todos');\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n        setSnackBarOpen(true);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.card}>\r\n        <h1 className={classes.header}>Login</h1>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <TextField\r\n            className={classes.textField}\r\n            defaultValue={username}\r\n            onChange={(event) => setUsername(event.target.value)}\r\n            inputRef={register({\r\n              required: 'Username required',\r\n              minLength: { value: 5, message: 'At least 5 characters' },\r\n              validate: true,\r\n            })}\r\n            error={!!errors.username}\r\n            helperText={errors.username && errors.username.message}\r\n            name=\"username\"\r\n            label=\"Username *\"\r\n          ></TextField>\r\n          <TextField\r\n            className={classes.textField}\r\n            defaultValue={password}\r\n            onChange={(event) => setPassword(event.target.value)}\r\n            label=\"Password *\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            autoComplete=\"true\"\r\n            inputRef={register({\r\n              required: 'Password required',\r\n              minLength: { value: 8, message: 'At least 8 characters' },\r\n              validate: true,\r\n            })}\r\n            error={!!errors.password}\r\n            helperText={errors.password && errors.password.message}\r\n          ></TextField>\r\n          <div className={classes.buttonHolder}>\r\n            <Button\r\n              className={classes.submitButton}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n              disabled={!formState.isValid}\r\n            >\r\n              Submit\r\n            </Button>\r\n            <Button className={classes.clearButton} variant=\"outlined\" color=\"primary\" onClick={() => handleClear()}>\r\n              Clear\r\n            </Button>\r\n          </div>\r\n\r\n          <h4 className={classes.registration}>\r\n            New Member? <NavLink to=\"/registration\">Register here</NavLink>\r\n          </h4>\r\n        </form>\r\n      </Card>\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        open={snackBarOpen}\r\n        autoHideDuration={3000}\r\n        onClose={() => setSnackBarOpen(false)}\r\n        message=\"Incorrect username and password\"\r\n      />\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}