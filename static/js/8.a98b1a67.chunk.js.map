{"version":3,"sources":["axios.js","containers/RegistrationPage/RegistrationPage.js"],"names":["instance","axios","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","common","registrationStyle","makeStyles","theme","header","top","marginBottom","color","textAlign","card","margin","breakpoints","down","minWidth","up","maxWidth","spacing","textField","width","buttonHolder","marginTop","display","justifyContent","form","flexDirection","alignItems","resetButton","marginRight","submitButton","loginLink","position","fontSize","textDecoration","RegistrationPage","props","useForm","mode","register","handleSubmit","errors","formState","clearErrors","reset","useState","username","setUsername","password","setPassword","passwordRepeat","setPasswordRepeat","classes","snackBarOpen","setSnackBarOpen","snackBarMessage","setSneckBarMessage","onSubmit","data","a","post","then","res","setTimeout","history","push","catch","err","console","error","className","name","label","defaultValue","onChange","event","target","value","inputRef","required","minLength","message","validate","helperText","type","password_repeat","variant","onClick","root","disabled","isValid","to","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose"],"mappings":"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","file":"static/js/8.a98b1a67.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://to-do-798.herokuapp.com/',\r\n});\r\n\r\ninstance.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.common['Authorization'] = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport default instance;\r\n","import axios from '../../axios';\r\nimport React, { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Button, Card, makeStyles, Snackbar, TextField } from '@material-ui/core';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst registrationStyle = makeStyles((theme) => ({\r\n  header: {\r\n    top: '2%',\r\n    marginBottom: '1em',\r\n    color: '#274e6c',\r\n    textAlign: 'center',\r\n  },\r\n  card: {\r\n    margin: 'auto',\r\n    [theme.breakpoints.down('xs')]: {\r\n      minWidth: '90%',\r\n    },\r\n    [theme.breakpoints.up('xs')]: {\r\n      maxWidth: '50%',\r\n    },\r\n    [theme.breakpoints.up('lg')]: {\r\n      maxWidth: '25%',\r\n    },\r\n    padding: theme.spacing(2),\r\n    boxSizing: 'border-box',\r\n  },\r\n  textField: {\r\n    width: '90%',\r\n    margin: theme.spacing(2),\r\n    marginBottom: 0,\r\n  },\r\n  buttonHolder: {\r\n    marginTop: 20,\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n    width: '100%',\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    '& .MuiButtonBase-root': {\r\n      width: '25%',\r\n      minWidth: 80,\r\n      [theme.breakpoints.down('xs')]: {\r\n        width: '30%',\r\n      },\r\n    },\r\n  },\r\n  resetButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  submitButton: {\r\n    color: 'white',\r\n  },\r\n  loginLink: {\r\n    width: '100%',\r\n    position: 'static',\r\n    fontSize: 16,\r\n    textAlign: 'center',\r\n    marginTop: 50,\r\n    color: '#274e6c',\r\n    '& a': {\r\n      color: '#de7a22',\r\n      textDecoration: 'none',\r\n    },\r\n    '& a:hover': {\r\n      textDecoration: 'underline',\r\n    },\r\n  },\r\n}));\r\n\r\nconst RegistrationPage = (props) => {\r\n  const { register, handleSubmit, errors, formState, clearErrors, reset } = useForm({\r\n    mode: 'onChange',\r\n  });\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [passwordRepeat, setPasswordRepeat] = useState('');\r\n  const classes = registrationStyle();\r\n  const [snackBarOpen, setSnackBarOpen] = useState(false);\r\n  const [snackBarMessage, setSneckBarMessage] = useState('');\r\n\r\n  const handleResetAllInputFields = () => {\r\n    setUsername('');\r\n    setPassword('');\r\n    setPasswordRepeat('');\r\n    clearErrors();\r\n    reset();\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    const username = data.username;\r\n    const password = data.password;\r\n    await axios\r\n      .post('/user/signin', { username, password })\r\n      .then((res) => {\r\n        setSneckBarMessage('Successful Registration');\r\n        setSnackBarOpen(true);\r\n        setTimeout(() => {\r\n          props.history.push('/login');\r\n        }, 1500);\r\n      })\r\n      .catch((err) => {\r\n        setSneckBarMessage('Registration Failed');\r\n        setSnackBarOpen(true);\r\n        console.error(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.card}>\r\n        <h1 className={classes.header}>Registration</h1>\r\n        <form onSubmit={handleSubmit(onSubmit)} className={classes.form}>\r\n          <TextField\r\n            className={classes.textField}\r\n            name=\"username\"\r\n            label=\"Username *\"\r\n            defaultValue={username}\r\n            onChange={(event) => setUsername(event.target.value)}\r\n            inputRef={register({\r\n              required: 'Username required',\r\n              minLength: { value: 5, message: 'At least 5 character' },\r\n              validate: true,\r\n            })}\r\n            error={!!errors.username}\r\n            helperText={errors.username && errors.username.message}\r\n          />\r\n          <TextField\r\n            className={classes.textField}\r\n            name=\"password\"\r\n            label=\"Password *\"\r\n            type=\"password\"\r\n            defaultValue={password}\r\n            onChange={(event) => setPassword(event.target.value)}\r\n            inputRef={register({\r\n              required: 'Password required',\r\n              minLength: { value: 8, message: 'At least 8 character' },\r\n              validate: true,\r\n            })}\r\n            error={!!errors.password}\r\n            helperText={errors.password && errors.password.message}\r\n          />\r\n          <TextField\r\n            className={classes.textField}\r\n            name=\"password_repeat\"\r\n            label=\"Repeat Password *\"\r\n            type=\"password\"\r\n            defaultValue={passwordRepeat}\r\n            onChange={(event) => setPasswordRepeat(event.target.value)}\r\n            inputRef={register({\r\n              required: 'Password required',\r\n              validate: (value) => value === password || 'The passwords do not match',\r\n            })}\r\n            error={!!errors.password_repeat}\r\n            helperText={errors.password_repeat && errors.password_repeat.message}\r\n          />\r\n          <div className={classes.buttonHolder}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              className={classes.resetButton}\r\n              onClick={handleResetAllInputFields}\r\n            >\r\n              Reset\r\n            </Button>\r\n            <Button\r\n              classes={{ root: classes.submitButton }}\r\n              disabled={!formState.isValid}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </div>\r\n        </form>\r\n        <h4 className={classes.loginLink}>\r\n          Changed your mind? <NavLink to=\"/login\">Back to Login</NavLink>\r\n        </h4>\r\n      </Card>\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        open={snackBarOpen}\r\n        autoHideDuration={1500}\r\n        onClose={() => {\r\n          setSnackBarOpen(false);\r\n        }}\r\n        message={snackBarMessage}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegistrationPage;\r\n"],"sourceRoot":""}